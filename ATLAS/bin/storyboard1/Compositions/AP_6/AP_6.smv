-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service9_TA_ProvideChoice, service9_TA_PlanRequest, service9_TA_StartInteraction, service9_TA_DefineDataViewerPattern, service9_RESET, service9_TA_DefineJourneyLegs, service10_TA_IdentifyLeg, service10_TA_StartLegHandling, service10_TA_EndLegHandling, service10_RESET, service10_TA_OrganizeData
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service9_TA_InsertSource, service9_TA_InsertOptionalData, service9_TA_ChooseAlternative, service9_TA_AssistantPlanningComplete, service9_TA_InsertDestination, service9_TA_PlanResponse, service9_TA_UseCurrentLocation, service9_TA_ShowResults, service9_TA_StartChatbot, service10_TA_ShowLegResults, service10_TA_HandleLegResults
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service9
VAR service9: {ST14, ST12, ST13, ST10, ST11, ST0, ST2, ST1, ST4, ST3, ST6, ST5, ST8, ST7, ST9};
ASSIGN
next(service9) :=
case
(service9 = ST5 & output = service9_TA_InsertOptionalData): ST6;
(service9 = ST6 & input = service9_RESET): ST0;
(service9 = ST14 & input = service9_RESET): ST0;
(service9 = ST6 & input = service9_TA_PlanRequest): ST7;
(service9 = ST5 & input = service9_RESET): ST0;
(service9 = ST10 & output = service9_TA_ChooseAlternative): ST11;
(service9 = ST2 & input = service9_RESET): ST0;
(service9 = ST10 & input = service9_RESET): ST0;
(service9 = ST4 & output = service9_TA_InsertDestination): ST5;
(service9 = ST11 & input = service9_TA_ProvideChoice): ST12;
(service9 = ST7 & output = service9_TA_PlanResponse): ST8;
(service9 = ST9 & input = service9_RESET): ST0;
(service9 = ST1 & input = service9_RESET): ST0;
(service9 = ST7 & input = service9_RESET): ST0;
(service9 = ST8 & input = service9_TA_DefineDataViewerPattern): ST9;
(service9 = ST3 & input = service9_RESET): ST0;
(service9 = ST3 & output = service9_TA_InsertSource): ST4;
(service9 = ST0 & input = service9_TA_StartInteraction): ST1;
(service9 = ST9 & output = service9_TA_ShowResults): ST10;
(service9 = ST12 & input = service9_RESET): ST0;
(service9 = ST12 & input = service9_TA_DefineJourneyLegs): ST13;
(service9 = ST2 & output = service9_TA_UseCurrentLocation): ST3;
(service9 = ST11 & input = service9_RESET): ST0;
(service9 = ST1 & output = service9_TA_StartChatbot): ST2;
(service9 = ST13 & output = service9_TA_AssistantPlanningComplete): ST14;
(service9 = ST13 & input = service9_RESET): ST0;
(service9 = ST4 & input = service9_RESET): ST0;
(service9 = ST8 & input = service9_RESET): ST0;
1:service9;
esac;
TRANS ( input = service9_TA_ProvideChoice) -> (service9 = ST11)
TRANS ( output = service9_TA_InsertSource) -> (service9 = ST3)
TRANS ( output = service9_TA_InsertOptionalData) -> (service9 = ST5)
TRANS ( output = service9_TA_ChooseAlternative) -> (service9 = ST10)
TRANS ( output = service9_TA_AssistantPlanningComplete) -> (service9 = ST13)
TRANS ( output = service9_TA_PlanResponse) -> (service9 = ST7)
TRANS ( output = service9_TA_ShowResults) -> (service9 = ST9)
TRANS ( input = service9_TA_StartInteraction) -> (service9 = ST0)
TRANS ( input = service9_RESET) -> (service9 = ST14 | service9 = ST12 | service9 = ST13 | service9 = ST10 | service9 = ST11 | service9 = ST2 | service9 = ST1 | service9 = ST4 | service9 = ST3 | service9 = ST6 | service9 = ST5 | service9 = ST8 | service9 = ST7 | service9 = ST9)
TRANS ( input = service9_TA_PlanRequest) -> (service9 = ST6)
TRANS ( output = service9_TA_InsertDestination) -> (service9 = ST4)
TRANS ( output = service9_TA_UseCurrentLocation) -> (service9 = ST2)
TRANS ( input = service9_TA_DefineDataViewerPattern) -> (service9 = ST8)
TRANS ( output = service9_TA_StartChatbot) -> (service9 = ST1)
TRANS ( input = service9_TA_DefineJourneyLegs) -> (service9 = ST12)

--	 service10
VAR service10: {ST2, ST1, ST4, ST3, ST6, ST5, ST0};
ASSIGN
next(service10) :=
case
(service10 = ST1 & input = service10_TA_IdentifyLeg): ST2;
(service10 = ST4 & output = service10_TA_ShowLegResults): ST5;
(service10 = ST5 & input = service10_TA_EndLegHandling): ST6;
(service10 = ST3 & input = service10_TA_OrganizeData): ST4;
(service10 = ST5 & input = service10_RESET): ST0;
(service10 = ST4 & input = service10_RESET): ST0;
(service10 = ST0 & input = service10_TA_StartLegHandling): ST1;
(service10 = ST1 & input = service10_RESET): ST0;
(service10 = ST6 & input = service10_RESET): ST0;
(service10 = ST2 & input = service10_RESET): ST0;
(service10 = ST2 & output = service10_TA_HandleLegResults): ST3;
(service10 = ST3 & input = service10_RESET): ST0;
1:service10;
esac;
TRANS ( output = service10_TA_ShowLegResults) -> (service10 = ST4)
TRANS ( input = service10_TA_IdentifyLeg) -> (service10 = ST1)
TRANS ( output = service10_TA_HandleLegResults) -> (service10 = ST2)
TRANS ( input = service10_TA_StartLegHandling) -> (service10 = ST0)
TRANS ( input = service10_TA_EndLegHandling) -> (service10 = ST5)
TRANS ( input = service10_RESET) -> (service10 = ST2 | service10 = ST1 | service10 = ST4 | service10 = ST3 | service10 = ST6 | service10 = ST5)
TRANS ( input = service10_TA_OrganizeData) -> (service10 = ST3)

-----------------------
--   O B J E C T S   --
-----------------------
--	 DataViewer
VAR DataViewer: {VIEWER_PATTERN_DEFINED, DATA_RECEIVED, INITIAL};
ASSIGN
next(DataViewer) :=
case
(input = service9_TA_DefineDataViewerPattern):{(VIEWER_PATTERN_DEFINED)};
(input = service10_TA_OrganizeData):{(VIEWER_PATTERN_DEFINED)};
1:DataViewer;
esac;
--	 TravelAssistant
VAR TravelAssistant: {JOURNEY_PLANNED, PLAN_ALTERNATIVES_SENT, USER_CHOICE_RECEIVED, PLAN_REFINED, LEG_REFINED, REQUIRED_INPUT_RECEIVED, INITIAL, JOURNEY_PLAN_FOUND, ASSISTANCE_COMPLETE};
ASSIGN
next(TravelAssistant) :=
case
(TravelAssistant = JOURNEY_PLANNED & input = service10_TA_EndLegHandling): LEG_REFINED;
(TravelAssistant = JOURNEY_PLANNED & output = service9_TA_AssistantPlanningComplete): ASSISTANCE_COMPLETE;
(TravelAssistant = PLAN_ALTERNATIVES_SENT & output = service9_TA_ChooseAlternative): USER_CHOICE_RECEIVED;
(TravelAssistant = USER_CHOICE_RECEIVED & input = service9_TA_ProvideChoice): PLAN_REFINED;
(TravelAssistant = INITIAL & input = service9_TA_PlanRequest): REQUIRED_INPUT_RECEIVED;
(TravelAssistant = PLAN_REFINED & input = service9_TA_DefineJourneyLegs): JOURNEY_PLANNED;
(TravelAssistant = REQUIRED_INPUT_RECEIVED & output = service9_TA_PlanResponse): JOURNEY_PLAN_FOUND;
(TravelAssistant = JOURNEY_PLAN_FOUND & output = service9_TA_ShowResults): PLAN_ALTERNATIVES_SENT;
1:TravelAssistant;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service9_TA_StartInteraction) -> ((((TravelAssistant = INITIAL))))
TRANS (input = service10_TA_StartLegHandling) -> ((((TravelAssistant = JOURNEY_PLANNED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((TravelAssistant in {LEG_REFINED}));
--	 Synchronicity enforcement
TRANS (service9 in {ST2, ST1, ST4, ST3, ST5, ST13, ST10, ST7, ST9}) -> (next(service9) != service9)
TRANS (service10 in {ST2, ST4}) -> (next(service10) != service10)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((DataViewer = VIEWER_PATTERN_DEFINED) & (TravelAssistant = JOURNEY_PLANNED))
INIT ((service9 = ST0) & (service10 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)