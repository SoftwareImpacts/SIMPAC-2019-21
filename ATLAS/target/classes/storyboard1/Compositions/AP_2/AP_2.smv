-------------------------------
--   C O M P O S I T I O N   --
-------------------------------
MODULE dn_main

---------------------
--   I N P U T S   --
---------------------
IVAR input:
{
UNDEF, service4_DVM_DataPatternRequest, service4_RESET
};

-----------------------
--   O U T P U T S   --
-----------------------
IVAR output:
{
UNDEF, service4_DVM_DataPatternResponse
};

-------------------------
--   S E R V I C E S   --
-------------------------
--	 service4
VAR service4: {ST2, ST1, ST0};
ASSIGN
next(service4) :=
case
(service4 = ST0 & input = service4_DVM_DataPatternRequest): ST1;
(service4 = ST2 & input = service4_RESET): ST0;
(service4 = ST1 & output = service4_DVM_DataPatternResponse): ST2;
(service4 = ST1 & input = service4_RESET): ST0;
1:service4;
esac;
TRANS ( output = service4_DVM_DataPatternResponse) -> (service4 = ST1)
TRANS ( input = service4_DVM_DataPatternRequest) -> (service4 = ST0)
TRANS ( input = service4_RESET) -> (service4 = ST2 | service4 = ST1)

-----------------------
--   O B J E C T S   --
-----------------------
--	 DataViewer
VAR DataViewer: {VIEWER_PATTERN_DEFINED, DATA_RECEIVED, INITIAL};
ASSIGN
next(DataViewer) :=
case
(DataViewer = INITIAL & input = service4_DVM_DataPatternRequest): DATA_RECEIVED;
(DataViewer = DATA_RECEIVED & output = service4_DVM_DataPatternResponse): VIEWER_PATTERN_DEFINED;
1:DataViewer;
esac;
-----------------------------------
--   P R E C O N D I T I O N S   --
-----------------------------------
TRANS (input = service4_DVM_DataPatternRequest) -> ((((DataViewer = INITIAL))))
TRANS (output = service4_DVM_DataPatternResponse) -> ((((DataViewer = DATA_RECEIVED))))
-----------------------------
--   I N V A R I A N T S   --
-----------------------------
--	 Synchronicity
TRANS (1-(input = UNDEF)) + (1-(output = UNDEF)) = 1

---------------------------------------
--   S Y N C H R O N I Z A T I O N   --
---------------------------------------
DEFINE SYNC0 := ((DataViewer in {VIEWER_PATTERN_DEFINED}));
--	 Synchronicity enforcement
TRANS (service4 in {ST1}) -> (next(service4) != service4)
-------------------------------
--   C O N T R O L L E R S   --
-------------------------------
--	 Fault Controller
VAR FAULT_CONTROLLER: { START, STOP };
INIT FAULT_CONTROLLER = START

ASSIGN
next(FAULT_CONTROLLER) := 
case
(FAULT_CONTROLLER = START & FALSE): STOP;
1: FAULT_CONTROLLER;
esac;

TRANS (output != UNDEF | input != UNDEF) -> (FAULT_CONTROLLER != STOP)

-------------------------------------
--   I N I T I A L I Z A T I O N   --
-------------------------------------
INIT ((DataViewer = INITIAL))
INIT ((service4 = ST0))

-----------------
--   G O A L   --
-----------------
MODULE main
VAR dn_main : dn_main;

GOAL ONEOF(
(dn_main.SYNC0), 1;
(dn_main.FAULT_CONTROLLER = STOP), 0

)